From 4984ad1cbe03022f8d0df8f60898b00425f85959 Mon Sep 17 00:00:00 2001
From: M1cha <sigmaepsilon92@gmail.com>
Date: Fri, 26 Aug 2016 06:29:27 +0200
Subject: [PATCH] unpackbootimg: turn into a python script

Turn unpackbootimg into a python script instead of a C utility

Change-Id: If049319d12ee9841eefb9ca3fdae5c775403bbbf
---
 mkbootimg/Android.mk      |  10 ++-
 mkbootimg/unpackbootimg   | 167 ++++++++++++++++++++++++++++++++++++
 mkbootimg/unpackbootimg.c | 211 ----------------------------------------------
 3 files changed, 175 insertions(+), 213 deletions(-)
 create mode 100755 mkbootimg/unpackbootimg
 delete mode 100644 mkbootimg/unpackbootimg.c

diff --git a/mkbootimg/Android.mk b/mkbootimg/Android.mk
index ed4fbdf64..f52297d30 100644
--- a/mkbootimg/Android.mk
+++ b/mkbootimg/Android.mk
@@ -10,7 +10,13 @@ LOCAL_MODULE := mkbootimg
 
 include $(BUILD_PREBUILT)
 
+
 include $(CLEAR_VARS)
-LOCAL_SRC_FILES := unpackbootimg.c
+
+LOCAL_SRC_FILES := unpackbootimg
+LOCAL_MODULE_CLASS := EXECUTABLES
+LOCAL_IS_HOST_MODULE := true
+
 LOCAL_MODULE := unpackbootimg
-include $(BUILD_HOST_EXECUTABLE)
+
+include $(BUILD_PREBUILT)
diff --git a/mkbootimg/unpackbootimg b/mkbootimg/unpackbootimg
new file mode 100755
index 000000000..2415a5f46
--- /dev/null
+++ b/mkbootimg/unpackbootimg
@@ -0,0 +1,167 @@
+#!/usr/bin/env python
+# Copyright 2015, The Android Open Source Project
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+from __future__ import print_function
+from sys import exit
+from argparse import ArgumentParser, FileType
+from os import rename
+from os.path import basename
+from struct import unpack, calcsize
+
+class Bunch:
+    def __init__(self, **kwds):
+        self.__dict__.update(kwds)
+
+def auto_unpack(fmt, f):
+    size = calcsize(fmt)
+    data = f.read(size)
+    return unpack(fmt, data[0:size])
+
+def get_magic_off(f):
+    BOOT_MAGIC = 'ANDROID!'.encode()
+
+    for i in range(513):
+        f.seek(i)
+        tmp = f.read(len(BOOT_MAGIC))
+        if tmp == BOOT_MAGIC:
+            print('Android magic found at: %d' % i)
+            return i
+
+    print('Android boot magic not found.');
+    exit(1)
+
+def read_header(args, off):
+    args.input.seek(off)
+    fmt = '8s10I16s512s32s1024s'
+    unpacked = auto_unpack(fmt, args.input)
+
+    parsed = Bunch()
+    parsed.headersz = calcsize(fmt)
+    parsed.magic = unpacked[0]
+    parsed.kernel_size = unpacked[1]
+    parsed.kernel_addr = unpacked[2]
+    parsed.ramdisk_size = unpacked[3]
+    parsed.ramdisk_addr = unpacked[4]
+    parsed.second_size = unpacked[5]
+    parsed.second_addr = unpacked[6]
+    parsed.tags_addr = unpacked[7]
+    parsed.pagesize = unpacked[8]
+    parsed.dt_size = unpacked[9]
+    parsed.name = unpacked[11].partition(b'\0')[0].decode()
+    parsed.cmdline = unpacked[12].partition(b'\0')[0].decode()
+    parsed.id = unpacked[13]
+    parsed.cmdline += unpacked[14].partition(b'\0')[0].decode()
+
+    os_version = unpacked[10]>>11
+    os_patch_level = unpacked[10]&0x7ff
+
+    a = (os_version>>14)&0x7f
+    b = (os_version>>7)&0x7f
+    c = os_version&0x7f
+    parsed.os_version = '%d.%d.%d' % (a,b,c)
+
+    y = (os_patch_level>>4) + 2000
+    m = os_patch_level&0xf
+    parsed.os_patch_level = '%04d-%02d-%02d' % (y,m,0)
+
+    return parsed
+
+def write_str_to_file(filename, s):
+    with open(filename, 'wb') as f:
+        f.write(s.encode())
+
+def parse_int(x):
+    return int(x, 0)
+
+def parse_cmdline():
+    parser = ArgumentParser()
+    parser.add_argument('-i', '--input', help='input file name', type=FileType('rb'),
+                        required=True)
+    parser.add_argument('-o', '--output', help='output directory', default='')
+    parser.add_argument('--pagesize', help='page size', type=parse_int,
+                        choices=[2**i for i in range(11,15)], default=0)
+    return parser.parse_args()
+
+def seek_padding(f, size, pagesize):
+    pagemask = pagesize - 1;
+    if((size & pagemask) != 0):
+        count = pagesize - (size & pagemask);
+        f.seek(count, 1);
+
+def write_input_to_file(args, filename, size):
+    with open(filename, 'wb') as f_out:
+        f_out.write(args.input.read(size))
+
+    seek_padding(args.input, size, args.pagesize)
+
+def fix_ramdisk_extension(filename):
+    bytes = []
+    with open(filename, 'rb') as f:
+        data = f.read(2)
+        if(len(data))!=2:
+            return
+        bytes = unpack('BB', data)
+
+    if bytes[0]==0x02 and bytes[1]==0x21:
+        rename(filename, filename+'.lz4')
+    else:
+        rename(filename, filename+'.gz')
+
+def write_data(args, header, off):
+    file_prefix = args.output
+    if file_prefix and file_prefix[-1]!='/':
+        file_prefix += '/'
+    file_prefix += basename(args.input.name) + '-'
+
+    write_str_to_file(file_prefix+'cmdline', header.cmdline)
+    write_str_to_file(file_prefix+'base', '%08x' % (header.kernel_addr - 0x00008000))
+    write_str_to_file(file_prefix+'ramdisk_offset', '%08x' % (header.ramdisk_addr - header.kernel_addr + 0x00008000))
+    write_str_to_file(file_prefix+'second_offset', '%08x' % (header.second_addr - header.kernel_addr + 0x00008000))
+    write_str_to_file(file_prefix+'tags_offset', '%08x' % (header.tags_addr - header.kernel_addr + 0x00008000))
+    write_str_to_file(file_prefix+'pagesize', '%d' % header.pagesize)
+    write_str_to_file(file_prefix+'name', header.name)
+    write_str_to_file(file_prefix+'os_version', header.os_version)
+    write_str_to_file(file_prefix+'os_patch_level', header.os_patch_level)
+
+    seek_padding(args.input, header.headersz, args.pagesize)
+
+    write_input_to_file(args, file_prefix+'zImage', header.kernel_size)
+    write_input_to_file(args, file_prefix+'ramdisk', header.ramdisk_size)
+    write_input_to_file(args, file_prefix+'second', header.second_size)
+    write_input_to_file(args, file_prefix+'dt', header.dt_size)
+
+    fix_ramdisk_extension(file_prefix+'ramdisk')
+
+def main():
+    args = parse_cmdline()
+    off = get_magic_off(args.input)
+    header = read_header(args, off)
+
+    print('BOARD_KERNEL_CMDLINE %s' % header.cmdline)
+    print('BOARD_KERNEL_BASE %08x' % (header.kernel_addr - 0x00008000))
+    print('BOARD_RAMDISK_OFFSET %08x' % (header.ramdisk_addr - header.kernel_addr + 0x00008000))
+    print('BOARD_SECOND_OFFSET %08x' % (header.second_addr - header.kernel_addr + 0x00008000))
+    print('BOARD_TAGS_OFFSET %08x' % (header.tags_addr - header.kernel_addr + 0x00008000))
+    print('BOARD_PAGE_SIZE %d' % header.pagesize)
+    print('BOARD_SECOND_SIZE %d' % header.second_size)
+    print('BOARD_DT_SIZE %d' % header.dt_size)
+
+    if args.pagesize == 0:
+        args.pagesize = header.pagesize
+
+    write_data(args, header, off)
+
+if __name__ == '__main__':
+    main()
diff --git a/mkbootimg/unpackbootimg.c b/mkbootimg/unpackbootimg.c
deleted file mode 100644
index 3d2fda736..000000000
--- a/mkbootimg/unpackbootimg.c
+++ /dev/null
@@ -1,211 +0,0 @@
-#include <stdio.h>
-#include <stdlib.h>
-#include <string.h>
-#include <unistd.h>
-#include <fcntl.h>
-#include <errno.h>
-#include <limits.h>
-#include <libgen.h>
-
-#include "mincrypt/sha.h"
-#include "bootimg.h"
-
-typedef unsigned char byte;
-
-int read_padding(FILE* f, unsigned itemsize, int pagesize)
-{
-    byte* buf = (byte*)malloc(sizeof(byte) * pagesize);
-    unsigned pagemask = pagesize - 1;
-    unsigned count;
-
-    if((itemsize & pagemask) == 0) {
-        free(buf);
-        return 0;
-    }
-
-    count = pagesize - (itemsize & pagemask);
-
-    fread(buf, count, 1, f);
-    free(buf);
-    return count;
-}
-
-void write_string_to_file(char* file, char* string)
-{
-    FILE* f = fopen(file, "w");
-    fwrite(string, strlen(string), 1, f);
-    fwrite("\n", 1, 1, f);
-    fclose(f);
-}
-
-int usage() {
-    printf("usage: unpackbootimg\n");
-    printf("\t-i|--input boot.img\n");
-    printf("\t[ -o|--output output_directory]\n");
-    printf("\t[ -p|--pagesize <size-in-hexadecimal> ]\n");
-    return 0;
-}
-
-int main(int argc, char** argv)
-{
-    char tmp[PATH_MAX];
-    char* directory = "./";
-    char* filename = NULL;
-    int pagesize = 0;
-
-    argc--;
-    argv++;
-    while(argc > 0){
-        char *arg = argv[0];
-        char *val = argv[1];
-        argc -= 2;
-        argv += 2;
-        if(!strcmp(arg, "--input") || !strcmp(arg, "-i")) {
-            filename = val;
-        } else if(!strcmp(arg, "--output") || !strcmp(arg, "-o")) {
-            directory = val;
-        } else if(!strcmp(arg, "--pagesize") || !strcmp(arg, "-p")) {
-            pagesize = strtoul(val, 0, 16);
-        } else {
-            return usage();
-        }
-    }
-    
-    if (filename == NULL) {
-        return usage();
-    }
-    
-    int total_read = 0;
-    FILE* f = fopen(filename, "rb");
-    boot_img_hdr header;
-
-    //printf("Reading header...\n");
-    int i;
-    for (i = 0; i <= 512; i++) {
-        fseek(f, i, SEEK_SET);
-        fread(tmp, BOOT_MAGIC_SIZE, 1, f);
-        if (memcmp(tmp, BOOT_MAGIC, BOOT_MAGIC_SIZE) == 0)
-            break;
-    }
-    total_read = i;
-    if (i > 512) {
-        printf("Android boot magic not found.\n");
-        return 1;
-    }
-    fseek(f, i, SEEK_SET);
-    printf("Android magic found at: %d\n", i);
-
-    fread(&header, sizeof(header), 1, f);
-    printf("BOARD_KERNEL_CMDLINE %s\n", header.cmdline);
-    printf("BOARD_KERNEL_BASE %08x\n", header.kernel_addr - 0x00008000);
-    printf("BOARD_RAMDISK_OFFSET %08x\n", header.ramdisk_addr - header.kernel_addr + 0x00008000);
-    printf("BOARD_SECOND_OFFSET %08x\n", header.second_addr - header.kernel_addr + 0x00008000);
-    printf("BOARD_TAGS_OFFSET %08x\n",header.tags_addr - header.kernel_addr + 0x00008000);
-    printf("BOARD_PAGE_SIZE %d\n", header.page_size);
-    printf("BOARD_SECOND_SIZE %d\n", header.second_size);
-    printf("BOARD_DT_SIZE %d\n", header.dt_size);
-    
-    if (pagesize == 0) {
-        pagesize = header.page_size;
-    }
-    
-    //printf("cmdline...\n");
-    sprintf(tmp, "%s/%s", directory, basename(filename));
-    strcat(tmp, "-cmdline");
-    write_string_to_file(tmp, header.cmdline);
-    
-    //printf("base...\n");
-    sprintf(tmp, "%s/%s", directory, basename(filename));
-    strcat(tmp, "-base");
-    char basetmp[200];
-    sprintf(basetmp, "%08x", header.kernel_addr - 0x00008000);
-    write_string_to_file(tmp, basetmp);
-
-    //printf("ramdisk_offset...\n");
-    sprintf(tmp, "%s/%s", directory, basename(filename));
-    strcat(tmp, "-ramdisk_offset");
-    char ramdisktmp[200];
-    sprintf(ramdisktmp, "%08x", header.ramdisk_addr - header.kernel_addr + 0x00008000);
-    write_string_to_file(tmp, ramdisktmp);
-
-    //printf("second_offset...\n");
-    sprintf(tmp, "%s/%s", directory, basename(filename));
-    strcat(tmp, "-second_offset");
-    char secondtmp[200];
-    sprintf(secondtmp, "%08x", header.second_addr - header.kernel_addr + 0x00008000);
-    write_string_to_file(tmp, secondtmp);
-
-    //printf("tags_offset...\n");
-    sprintf(tmp, "%s/%s", directory, basename(filename));
-    strcat(tmp, "-tags_offset");
-    char tagstmp[200];
-    sprintf(tagstmp, "%08x", header.tags_addr - header.kernel_addr + 0x00008000);
-    write_string_to_file(tmp, tagstmp);
-
-    //printf("pagesize...\n");
-    sprintf(tmp, "%s/%s", directory, basename(filename));
-    strcat(tmp, "-pagesize");
-    char pagesizetmp[200];
-    sprintf(pagesizetmp, "%d", header.page_size);
-    write_string_to_file(tmp, pagesizetmp);
-    
-    total_read += sizeof(header);
-    //printf("total read: %d\n", total_read);
-    total_read += read_padding(f, sizeof(header), pagesize);
-
-    sprintf(tmp, "%s/%s", directory, basename(filename));
-    strcat(tmp, "-zImage");
-    FILE *k = fopen(tmp, "wb");
-    byte* kernel = (byte*)malloc(header.kernel_size);
-    //printf("Reading kernel...\n");
-    fread(kernel, header.kernel_size, 1, f);
-    total_read += header.kernel_size;
-    fwrite(kernel, header.kernel_size, 1, k);
-    fclose(k);
-
-    //printf("total read: %d\n", header.kernel_size);
-    total_read += read_padding(f, header.kernel_size, pagesize);
-
-
-    byte* ramdisk = (byte*)malloc(header.ramdisk_size);
-    //printf("Reading ramdisk...\n");
-    fread(ramdisk, header.ramdisk_size, 1, f);
-    total_read += header.ramdisk_size;
-    sprintf(tmp, "%s/%s", directory, basename(filename));
-    if(ramdisk[0] == 0x02 && ramdisk[1]== 0x21)
-        strcat(tmp, "-ramdisk.lz4");
-    else
-        strcat(tmp, "-ramdisk.gz");
-    FILE *r = fopen(tmp, "wb");
-    fwrite(ramdisk, header.ramdisk_size, 1, r);
-    fclose(r);
-
-    total_read += read_padding(f, header.ramdisk_size, pagesize);
-
-    sprintf(tmp, "%s/%s", directory, basename(filename));
-    strcat(tmp, "-second");
-    FILE *s = fopen(tmp, "wb");
-    byte* second = (byte*)malloc(header.second_size);
-    //printf("Reading second...\n");
-    fread(second, header.second_size, 1, f);
-    total_read += header.second_size;
-    fwrite(second, header.second_size, 1, r);
-    fclose(s);
-
-    total_read += read_padding(f, header.second_size, pagesize);
-
-    sprintf(tmp, "%s/%s", directory, basename(filename));
-    strcat(tmp, "-dt");
-    FILE *d = fopen(tmp, "wb");
-    byte* dt = (byte*)malloc(header.dt_size);
-    //printf("Reading dt...\n");
-    fread(dt, header.dt_size, 1, f);
-    total_read += header.dt_size;
-    fwrite(dt, header.dt_size, 1, r);
-    fclose(d);
-    
-    fclose(f);
-    
-    //printf("Total Read: %d\n", total_read);
-    return 0;
-}
